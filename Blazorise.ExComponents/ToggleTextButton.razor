<Button Class="@BtnClass" Clicked="ToggleState" Size="Size"  Outline="Outline" Color="ButtonColor">
    @if (Toggled)
    {

        <Span TextColor="ToggledColor" >@ToggledText</Span>
       
    }
    else
    {
        <Span TextColor="Color" >@Text</Span>
    }
</Button>
<style>
    @($".{_noFocusClassName}"):focus {
        outline: none !important;
        box-shadow: none !important;
    }
</style>

@code {
    readonly string _noFocusClassName=$"a{Guid.NewGuid():N}" ;
    string BtnClass=>Focusable?"":_noFocusClassName ;

    [Parameter]
    public bool Toggled { get; set; }

    [Parameter]
    public string Text { get; set; } = "";

    [Parameter]
    public string ToggledText { get; set; } = "";

    [Parameter]
    public TextColor ToggledColor { get; set; } = TextColor.Default;

    [Parameter]
    public TextColor Color { get; set; } = TextColor.Default;

    [Parameter]
    public bool Outline { get; set; } = false;

    [Parameter]
    public Color ButtonColor { get; set; } = Blazorise.Color.Primary;

    [Parameter]
    public bool Focusable { get; set; } = true;


    [Parameter]
    public EventCallback<bool> ToggledChanged { get; set; }


    private async Task ToggleState()
    {
        Toggled = !Toggled;
        await ToggledChanged.InvokeAsync(Toggled);

    }

    [Parameter]
    public Size? Size { get; set; }

}