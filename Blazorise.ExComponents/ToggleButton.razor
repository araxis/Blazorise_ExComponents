<Button Class="@BtnClass"
        Margin="Margin"
        Block="Block"
        Clicked="ToggleState" 
        Disabled="Disabled"
        Size="Size"
        Outline="Outline" 
        Color="BtnColor">

    @if (Toggled)
    {
        if (ToggledIcon != null)
        {
            <Icon Padding="Padding.Is1" TextColor="ToggledIconColor" Name="@ToggledIcon"/>
        }
        if (!string.IsNullOrWhiteSpace(ToggledText))
        {
            <Span TextColor="ToggledTextColor">@ToggledText</Span>
        }
      
    }
    else
    {
        if (Icon != null)
        {
            <Icon Padding="Padding.Is1" TextColor="IconColor" Name="@Icon"/>
        }
        if (!string.IsNullOrWhiteSpace(Text))
        {
           <Span TextColor="TextColor">@Text</Span>
        }
       
    }

</Button>
<style>
    @($".{_noFocusClassName}"):focus {
        outline: none !important;
        box-shadow: none !important;
    }
</style>
@code {
    readonly string _noFocusClassName=$"a{Guid.NewGuid():N}" ;
    string BtnClass=>Focusable?"":_noFocusClassName ;

    Color BtnColor => Toggled ? ToggledColor ?? Color : Color;

    [Parameter]
    public bool Toggled { get; set; }

    [Parameter]
    public string Text { get; set; } = "";

    [Parameter]
    public string ToggledText { get; set; } = "";

    [Parameter]
    public TextColor ToggledTextColor { get; set; } = TextColor.Default;

    [Parameter]
    public TextColor TextColor { get; set; } = TextColor.Default;

    [Parameter]
    public object? Icon { get; set; } 

    [Parameter]
    public object? ToggledIcon { get; set; }

    [Parameter]
    public TextColor ToggledIconColor { get; set; } = TextColor.Default;

    [Parameter]
    public TextColor IconColor { get; set; } = TextColor.Default;

    [Parameter]
    public bool Outline { get; set; } = false;

    [Parameter]
    public bool Focusable { get; set; } = true;

    [Parameter]
    public bool Block { get; set; } 

    [Parameter]
    public Color Color { get; set; } = Color.Default;

    [Parameter]
    public Color? ToggledColor { get; set; } 

    [Parameter]
    public Size Size { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public EventCallback<bool> ToggledChanged { get; set; }

    [Parameter]
    public IFluentSpacing Margin { get; set; } = BMargin.Is1.FromBottom.Is1.FromEnd;

    private async Task ToggleState()
    {
        Toggled = !Toggled;
        await ToggledChanged.InvokeAsync(Toggled);

    }

  

}