<Button Class="@BtnClass"  Clicked="ToggleState"  Size="Size" Outline="Outline"  Color="ButtonColor">

    @if (Toggled)
    {
        <Icon TextColor="ToggledColor" Name="@ToggledIcon"></Icon>
    }
    else
    {
        <Icon TextColor="Color" Name="@Icon"></Icon>
    }

</Button>
<style>


    @($".{_noFocusClassName}"):focus {
        outline: none !important;
        box-shadow: none !important;
    }
</style>
@code {
    readonly string _noFocusClassName=$"a{Guid.NewGuid():N}" ;
    string BtnClass=>Focusable?"":_noFocusClassName ;

    [Parameter]
    public bool Toggled { get; set; }

    [Parameter]
    public IconName Icon { get; set; } = IconName.Add;

    [Parameter]
    public IconName ToggledIcon { get; set; } = IconName.Delete;

    [Parameter]
    public TextColor ToggledColor { get; set; } = TextColor.Default;

    [Parameter]
    public TextColor Color { get; set; } = TextColor.Default;

    [Parameter]
    public bool Outline { get; set; } = false;

    [Parameter]
    public bool Focusable { get; set; } = true;

    [Parameter]
    public Color ButtonColor { get; set; } = Blazorise.Color.Link;

    [Parameter]
    public Size Size { get; set; }


    [Parameter]
    public EventCallback<bool> ToggledChanged { get; set; }


    private async Task ToggleState()
    {
        Toggled = !Toggled;
        await ToggledChanged.InvokeAsync(Toggled);

    }

}
