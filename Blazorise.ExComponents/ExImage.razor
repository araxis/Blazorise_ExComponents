@using Microsoft.JSInterop
@inject IJSRuntime _jsRuntime

<Div Display="Display" Position="Position.Relative" Width="Width" Margin="Margin">

    <Image Source="@ImgSrc" Width="BWidth.Is100" Height="Height"
           onerror=@($"this.onerror=null;this.src='{FallbackSrc}';") />



    @if (ChildContent != null)
    {
        <div style="@style">
            <Div Padding="ContentPadding"
             Style=@($"opacity:{ContentOpacity}") Background="ContentBackground">
                @ChildContent
            </Div>
        </div>
    }
    else
    {

        <div  style="@style">
            <Div Padding="ContentPadding"
             TextAlignment="TextAlignment.Center"
             Style=@($"opacity:{ContentOpacity}")
             Background="ContentBackground">
                <Heading Margin="BMargin.Is0" TextColor="TextColor" Size="TextSize">
                    @Text
                </Heading>
            </Div>


        </div>

    }



</Div>


@code {
   

    string style => ContentPosition switch
    {
        ContentPosition.TopLeft => $"position: absolute;top: {Top};left: {Left};",
        ContentPosition.TopCenter => $"position: absolute;top: {Top};left:50%;transform: translate(-50%, 0)",
        ContentPosition.TopRight => $"position: absolute;top: {Top}; right: {Right};",
        ContentPosition.BottomLeft => $"position: absolute;bottom: {Bottom};left: {Left};",
        ContentPosition.BottomRight => $"position: absolute;bottom: {Bottom};right: {Right};",
        ContentPosition.BottomCenter => $"position: absolute;bottom: {Bottom};left: 50%;transform: translate(-50%, 0); ",
        ContentPosition.LeftCenter => $"position: absolute;top:50%;left: {Left};transform: translate(0, -50%)",
        ContentPosition.RightCenter => $"position: absolute;top: 50%;right: {Right};transform: translate(0, -50%)",
        ContentPosition.Center => "position: absolute; top:50%;left:50%;transform: translate(-50%, -50%)",
        ContentPosition.Bottom => $"position: absolute;bottom:{Bottom};right:{Right};left:{Left};",
        ContentPosition.Top => $"position: absolute;top:{Top};right:{Right};left:{Left};",
        _ => throw new ArgumentOutOfRangeException()
    };

    [Parameter]
    public string ImgSrc { get; set; }

    [Parameter]
    public string FallbackSrc { get; set; } = "./_content/Arax.Blazorise.Extra/images/Empty2.png";

    [Parameter]
    public ContentPosition ContentPosition { get; set; }



    [Parameter]
    public string Text { get; set; } = "";

    [Parameter]
    public TextColor TextColor { get; set; } = TextColor.Default;

    [Parameter]
    public Background ContentBackground { get; set; } = Background.Default;

    [Parameter]
    public HeadingSize TextSize { get; set; } = HeadingSize.Is3;

    [Parameter]
    public double ContentOpacity { get; set; } = 1;

    [Parameter]
    public IFluentSpacing ContentPadding { get; set; } = Padding.Is3;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }


    [Parameter]
    public MeasureValue Top { get; set; } = 0.px();

    [Parameter]
    public MeasureValue Left { get; set; } = 0.px();

    [Parameter]
    public MeasureValue Bottom { get; set; } = 0.px();

    [Parameter]
    public MeasureValue Right { get; set; } = 0.px();


    public class WindowDimension
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }



    [Parameter]
    public IFluentSizing Width { get; set; }

    [Parameter]
    public IFluentSizing Height { get; set; }

    [Parameter]
    public IFluentDisplay Display { get; set; } = BDisplay.InlineBlock;

    [Parameter]
    public IFluentSpacing Margin { get; set; } = BMargin.Is0;

}