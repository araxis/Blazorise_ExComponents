
<Card Flex="Flex"
      Display="Display"
      Margin="Margin"
      Background="@Background"
      Width="Width"
      Height="Height"
      Padding="Padding.Is0">
    <CardHeader
                TextAlignment="HeaderTextAlignment"
                Border="Flat?Border.Is0:null"
                Background="TitleBackground??Background">
        <Span  TextAlignment="HeaderTextAlignment" TextColor="TitleTextColor" Style="font-size: 18px">@Title</Span>
    </CardHeader>
    <CardBody Padding="Padding.Is0.FromTop.Is2.FromStart.Is2.FromEnd.Is1.FromBottom" Background="ValueBackground??Background">


        <Div Flex="@ContentFlex" >
            @if (ChildContent is not null)
            {
                <Div Style="Height:100%">
                    @ChildContent
                </Div>
               
            }
            else
            {


                @if (PrefixContent != null || Prefix != null)
                {
                    <Span>
                        @if (PrefixContent != null)
                        {
                            @PrefixContent
                        }
                        else
                        {
                            <Span TextColor="PrefixTextColor" Style="font-size: 26px">
                                @Prefix
                            </Span>
                        }


                    </Span>
                }

                <Div Margin="Blazorise.Margin.Is2.FromStart.Is2.FromEnd" TextAlignment="TextAlignment.Center">

                    <Span TextColor="ValueTextColor" Style="font-size: 26px" >
                        @Value
                    </Span>

                </Div>
                @if (SuffixContent != null || Suffix != null)
                {
                    <Span>
                        @if (SuffixContent != null)
                        {
                            @SuffixContent
                        }
                        else
                        {
                            <Span TextColor="SuffixTextColor" Style="font-size: 26px">
                                @Suffix
                            </Span>
                        }


                    </Span>
                }

            }
        </Div>
    </CardBody>
</Card>


@code {

    [Parameter]
    public IFluentFlex Flex { get; set; }

    [Parameter]
    public IFluentSpacing Margin { get; set; } = Blazorise.Margin.Is1;

    [Parameter]
    public string Title { get; set; } = "";

    [Parameter]
    public string Value { get; set; } = "";

    [Parameter]
    public Background? TitleBackground { get; set; }

    [Parameter]
    public Background? ValueBackground { get; set; }

    Background Background => Color == Color.Default ? Background.White : Color.ToBackground();

    [Parameter]
    public Color Color { get; set; } = Color.Default;

    [Parameter]
    public bool Flat { get; set; } = true;


    [Parameter]
    public TextColor TitleTextColor { get; set; } = TextColor.Default;

    [Parameter]
    public TextColor ValueTextColor { get; set; } = TextColor.Dark;


    private TextAlignment HeaderTextAlignment => Alignment switch
    {

        TileAlignment.Start => TextAlignment.Start,
        TileAlignment.Center => TextAlignment.Center,
        TileAlignment.End => TextAlignment.End,
        _ => throw new ArgumentOutOfRangeException()
    };


    [Parameter]
    public string? Prefix { get; set; }

    [Parameter]
    public RenderFragment? PrefixContent { get; set; }

    [Parameter]
    public TextColor PrefixTextColor { get; set; } = TextColor.Dark;

    [Parameter]
    public TileAlignment Alignment { get; set; } = TileAlignment.Center;

    [Parameter]
    public string? Suffix { get; set; }

    [Parameter]
    public RenderFragment? SuffixContent { get; set; }

    [Parameter]
    public TextColor SuffixTextColor { get; set; } = TextColor.Dark;

    private IFluentFlex ContentFlex => Alignment switch
    {
        TileAlignment.Center => Blazorise.Flex.JustifyContent.Center.AlignItems.Center.NoWrap,
        TileAlignment.Start => Blazorise.Flex.JustifyContent.Start.AlignItems.Center.NoWrap,
        _ => Blazorise.Flex.JustifyContent.End.AlignItems.Center.NoWrap
    };

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public IFluentDisplay Display { get; set; } = BDisplay.InlineBlock;

    [Parameter]
    public IFluentSizing Width { get; set; }
    [Parameter]
    public IFluentSizing Height { get; set; }

}
