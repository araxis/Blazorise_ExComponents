
<Card>

    <CardHeader Padding="Padding.Is2"
                Flex="Flex.AlignItems.Center.JustifyContent.Between.NoWrap"
                TextAlignment="TextAlignment.Center"
                Style=@($"background-color:{HeaderBackGround}")>
        <Span @onclick="Prev" Style="cursor: pointer" TextAlignment="TextAlignment.Center" Padding="Padding.Is3">&#10094;</Span>

        <Div>
            <span class="month-name">@Month</span>
            <br>
            <span class="year">@_date.Year</span>
        </Div>
        <Span  @onclick="Next" Style="cursor: pointer"  TextAlignment="TextAlignment.Center" Padding="Padding.Is3">&#10095;</Span>
    </CardHeader>
    <CardBody Padding="Padding.Is0">
        <div class="grid-container">
            <span class="weekdays2">Su</span>
            <span class="weekdays2">Mo</span>
            <span class="weekdays2">Tu</span>
            <span class="weekdays2">We</span>
            <span class="weekdays2">Th</span>
            <span class="weekdays2">Fr</span>
            <span class="weekdays2">Sa</span>


            @foreach (var item in GetMonthDates)
            {
                var config = GetItemConfig(item);
                <Div Margin="Margin.Is1" Padding="Padding.Is1" TextAlignment="TextAlignment.Center">
                    <Span Border="@config.Border" @onclick="_ => DateSelected(item)"
                          Padding="@config.Padding"
                          TextColor="@config.TextColor"
                          Style=@($"background-color:{config.BackgroundColor};cursor:pointer")>
                        @item.Day
                    </Span>
                </Div>
            }
        </div>
    </CardBody>
</Card>





@code {


    private DateTime _selectedDate=DateTime.MinValue;
    private DateTime _date = DateTime.Now;
    private readonly DateItemConfig _defaultDateItemConfig = new(Border.Is0,Padding.Is2, TextColor.Default, "#eee");

    [Parameter]
    public DateTime Date
    {
        get => _date;
        set
        {
            _date = value;
            _selectedDate = value;
        }

    }

    [Parameter]
    public bool RenderToday { get; set; } = true;

    [Parameter]
    public bool RenderSelected { get; set; } = true;

    [Parameter]
    public string HeaderBackGround { get; set; } = "#1abc9c";

    string Month => _date.ToString("MMM");

    IEnumerable<DateTime> GetMonthDates
    {
        get
        {
            var ret = new List<DateTime>();
            var days =DateTime.DaysInMonth(_date.Year, _date.Month);
            var date = new DateTime(_date.Year, _date.Month, 1);
            var weekDay = date.DayOfWeek;
            date = date.AddDays(-(int) weekDay);
            for (var i = 0; i < days+(int)weekDay; i++)
            {

                ret.Add(date.AddDays(i));
            }
            return ret;
        }
    }

    [Obsolete("use ConfigItem")]
    [Parameter]
    public Func<DateTime,DateItemConfig, DateItemConfig>? GetItemConfigMethod { get; set; } = null;

    [Parameter]
    public Func<DateTime,DateItemConfig, DateItemConfig>? ConfigItem { get; set; } = null;

    private DateItemConfig GetItemConfig(DateTime date)
    {
        if (ConfigItem is not null)
        {
            return ConfigItem(date,_defaultDateItemConfig);
        }

        if (GetItemConfigMethod is not null)
        {
            return GetItemConfigMethod(date,_defaultDateItemConfig);
        }

        if (date.Date == _selectedDate.Date && RenderSelected)
        {
            return _defaultDateItemConfig with{TextColor = TextColor.White,BackgroundColor = "#bc901a"};
        }
        if (RenderToday && date.IsToday())
        {
            return _defaultDateItemConfig with{TextColor = TextColor.White,BackgroundColor = "#1abc9c"};
        }
         return  _defaultDateItemConfig;
    }


    [Parameter]
    public EventCallback<DateTime> DateChanged { get; set; }

    private void Prev()
    {
        _date = _date.AddMonths(-1);
   
    }

    private void Next()
    {
        _date = _date.AddMonths(1);
       
    }

    private async Task DateSelected(DateTime item)
    {
        _selectedDate = item;
        await DateChanged.InvokeAsync(item);
    }



}