@if (Visible)
{

    <Card Position="Position.Relative"
     Padding="Padding.Is2.FromBottom.Is2.FromTop"
     Border="ToContainerBorder()"
     Style="@BorderStyle" Margin="Margin">

        <Div Background="Color.ToBackground()" Padding="Padding.Is0" Margin="BMargin.Is0" Position="Position.Absolute"
             Style="top: 0; left: 0; opacity: .4;" Border="ToContentBorder()"
             Width="Width.Is100" Height="Height.Is100">

        </Div>
        <Div Flex="Flex.JustifyContent.Between.AlignItems.Center" >
            <Heading Padding="Padding.Is2.FromStart.Is2.FromEnd" Size="HeadingSize.Is2">@Title</Heading>
            @if (CloseButton)
            {
                <CloseButton  Style="z-index: 1000" Clicked="Close" Margin="BMargin.Is2.FromEnd" />
                
            }
        </Div>


        <Paragraph Padding="Padding.Is2.FromStart.Is2.FromEnd" TextOverflow="TextOverflow.Wrap" Style="z-index: 1000">
            @if (ChildContent != null)
            {
                @ChildContent
            }
            else
            {
                @Description
            }

        </Paragraph>
        



    </Card>
}
@code {

    [CascadingParameter]
    Theme? Theme { get; set; }

    [Parameter]
    public bool? IsRounded { get; set; }
    bool isRounded => IsRounded ?? Theme?.IsRounded ?? new Theme().IsRounded;

    [Parameter]
    public NoteBorder NoteBorder { get; set; } = NoteBorder.Start;

    [Parameter]
    public string Title { get; set; } = "";

    [Parameter]
    public string Description { get; set; } = "";

    [Parameter]
    public Color Color { get; set; } = Color.Primary;

    [Parameter]
    public bool Visible { get; set; } = true;

    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }

    [Parameter]
    public bool CloseButton { get; set; }

    string BorderStyle => NoteBorder switch
    {
        NoteBorder.Top => "border-left-width: 0!important;border-right-width:0!important;border-bottom-width:0!important;",
        NoteBorder.End => "border-left-width: 0!important;border-top-width:0!important;border-bottom-width:0!important;",
        NoteBorder.Bottom => "border-left-width:0!important;border-right-width:0!important;border-top-width:0!important;",
        NoteBorder.Start => "border-top-width:  0!important;border-right-width:0!important;border-bottom-width:0!important;",
        _ => throw new ArgumentOutOfRangeException()
    };

    private IFluentBorderColorWithSide ToContainerBorder()
    {
        var border = isRounded ? Border.Rounded.Is5 : Border.Is5;
        if (Color == Color.Danger) return border.Danger;
        if (Color == Color.Dark) return border.Dark;
        if (Color == Color.Default) return border.White;
        if (Color == Color.Info) return border.Info;
        if (Color == Color.Light) return border.Light;
        if (Color == Color.Link) return border.Light;
        if (Color == Color.Primary) return border.Primary;
        if (Color == Color.Secondary) return border.Secondary;
        if (Color == Color.Success) return border.Success;
        if (Color == Color.Warning) return border.Warning;
        return border.White;
    }

    private IFluentBorder ToContentBorder()
    {
        return isRounded ? Border.RoundedEnd : null;

    }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public IFluentSpacing Margin { get; set; } = BMargin.Is1.FromBottom;

    private async Task Close()
    {
        Visible = false;
        await VisibleChanged.InvokeAsync(false);
    }



}